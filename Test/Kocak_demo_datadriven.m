%% Data-driven MARS for solution of the inverse problem of ECGI

% Written by: Onak
% Modified by: Kocak
% Adapted from 'demo_datadriven.m'
% Requires building MARS environment.

%% Initialize

clear
clc

%% Experiments loop
for x=45:45

%% Identify
experimentName = '119';
% experimentName = num2str(x+7);
modelName = num2str(x);

%% Add paths

addpath('..\DataDriven')

%% Loading training data

% Training data generated by Kocak

addpath('D:\Academic\METU\Thesis\Code\Kocak\TrainingDataKocak');

% load(['trainingData_UTv2_',modelName,'.mat'])
% load(['trainingData_UT2v3_',modelName,'.mat'])
%% Loading test data

% Test data generated by Kocak

addpath('D:\Academic\METU\Thesis\Code\Kocak\TestDataKocak');

load('testData_UT2_I3d.mat')

%% Generate model for EGM 10 as an example

% earthModel = DdModelingMars(training.Ep, training.Bsp);
% 
% save(['D:\Academic\METU\Thesis\Code\Kocak\ExperimentsKocak\model_',modelName,'.mat'], 'earthModel')

load(['D:\Academic\METU\Thesis\Code\Kocak\ExperimentsKocak\model_',modelName]);

%% Test and evaluation

for i=1:5 % i is beat  number

    originalEPs = test(i).ep;
         
    egm = [];
    
    for j=1:247 % j is the lead number

        % BSPM must be (TxN) matrix where T is the number of time samples and N is the number of BSP lead
        egm(:,j) = earthModel(j).predict(test(i).bspm');% bspm' for Onak test data, bsp.potvals' for Kocak test data

    end
    %% Evaluation
    
    % Quantitative Evaluation

    [evaluation(i).temporal_CC, evaluation(i).mean_temporal_CC, evaluation(i).std_temporal_CC] = Kutay_calculate_cc(originalEPs',egm);
    [evaluation(i).spatial_CC, evaluation(i).mean_spatial_CC, evaluation(i).std_spatial_CC] = Kutay_calculate_cc(originalEPs,egm');
    [evaluation(i).RE, evaluation(i).mean_RE, evaluation(i).std_RE] = Kutay_calculate_re(originalEPs,egm');

    evaluation(i).estimation = egm;
end

save(['D:\Academic\METU\Thesis\Code\Kocak\ExperimentsKocak\experiment_',experimentName,'.mat'], 'evaluation')

end

% Display
% 
% figure
% plot([test(8).ep(10,:)' egm(:,10)])
% legend('True' ,'Estimated');
% xlabel('time');
% ylabel('mV')
% 
% 
% % disp("Lead 10 model")
% % earthModel_10.format();
% 
% subplot(2,1,1);
% plot([(test(8).ep)' egm(:,1)])% ep for Onak test data, ep.potvals for Kocak test data
% 
% title('EGM 10')
% legend('True' ,'Estimated');
% xlabel('time');
% ylabel('mV')
 
% %% generate model for EGM 50
% earthModel_50 = DdModelingMars(training.Ep(:,50), training.Bsp);
% display("Lead 50 model")
% earthModel_50.format();
% 
% % predict EGM 50 corresponding to from new Bspm
% egm_50 = earthModel_50.predict(test.bspm');% bspm' for Onak test data, bsp.potvals' for Kocak test data
% 
%  subplot(2,1,2);
%  plot([test.ep(50,:)' egm_50])% ep for Onak test data, ep.potvals for Kocak test data
%  title('EGM 50')
%  legend('True', 'Estimated');
%  xlabel('time');
%  ylabel('mV')
